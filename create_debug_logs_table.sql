-- Create a table for storing debug logs
CREATE TABLE IF NOT EXISTS debug_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type VARCHAR(255) NOT NULL,
  campaign_id UUID REFERENCES promotions(id) ON DELETE CASCADE,
  error_message TEXT,
  raw_response TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  metadata JSONB DEFAULT '{}'::jsonb
);

-- Add comment for better Supabase Studio display
COMMENT ON TABLE debug_logs IS 'Debug logs for tracking errors in API processing';

-- Add indexes for quicker lookups
CREATE INDEX IF NOT EXISTS debug_logs_campaign_id_idx ON debug_logs(campaign_id);
CREATE INDEX IF NOT EXISTS debug_logs_type_idx ON debug_logs(type);
CREATE INDEX IF NOT EXISTS debug_logs_created_at_idx ON debug_logs(created_at);

-- Add RLS policies
ALTER TABLE debug_logs ENABLE ROW LEVEL SECURITY;

-- Allow admin users to view debug logs
CREATE POLICY admin_select_debug_logs ON debug_logs
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE profiles.id = auth.uid() AND profiles.is_admin = true
    )
  );

-- Allow admin users to insert debug logs
CREATE POLICY admin_insert_debug_logs ON debug_logs
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE profiles.id = auth.uid() AND profiles.is_admin = true
    )
  );

-- Allow service role (used by API routes) to manage debug logs
CREATE POLICY service_role_manage_debug_logs ON debug_logs
  FOR ALL
  USING (auth.role() = 'service_role'); 